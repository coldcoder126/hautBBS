<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.coldcoder.dao.MessageMapper" >
  <resultMap id="BaseResultMap" type="cn.coldcoder.pojo.Message" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="from_uid" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="to_uid" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="content" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="have_read" jdbcType="BIT" javaType="java.lang.Boolean" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, from_uid, to_uid, content, have_read, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from message
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from message
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.coldcoder.pojo.Message" >
    insert into message (id, from_uid, to_uid, 
      content, have_read, create_time, 
      update_time)
    values (#{id,jdbcType=INTEGER}, #{fromUid,jdbcType=INTEGER}, #{toUid,jdbcType=INTEGER}, 
      #{content,jdbcType=VARCHAR}, #{haveRead,jdbcType=BIT}, now(),
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.coldcoder.pojo.Message" >
    insert into message
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="fromUid != null" >
        from_uid,
      </if>
      <if test="toUid != null" >
        to_uid,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="haveRead != null" >
        have_read,
      </if>
        create_time,
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="fromUid != null" >
        #{fromUid,jdbcType=INTEGER},
      </if>
      <if test="toUid != null" >
        #{toUid,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="haveRead != null" >
        #{haveRead,jdbcType=BIT},
      </if>
        now(),
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.coldcoder.pojo.Message" >
    update message
    <set >
      <if test="fromUid != null" >
        from_uid = #{fromUid,jdbcType=INTEGER},
      </if>
      <if test="toUid != null" >
        to_uid = #{toUid,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="haveRead != null" >
        have_read = #{haveRead,jdbcType=BIT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
        update_time = now(),
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.coldcoder.pojo.Message" >
    update message
    set from_uid = #{fromUid,jdbcType=INTEGER},
      to_uid = #{toUid,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      have_read = #{haveRead,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = now()
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="readAll" parameterType="map">
    update message
    set have_read =1
    where (from_uid=#{fromUid} and to_uid=#{toUid}) and create_time &lt; now()
  </update>

    <select id="selectHistory" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from message
        where (from_uid=#{fromUid} and to_uid=#{toUid}) or (from_uid=#{toUid} and to_uid=#{fromUid})
        ORDER BY create_time DESC
    </select>

    <select id="selectUnread" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from message
        where to_uid = #{toUid} and have_read = 0
    </select>
</mapper>